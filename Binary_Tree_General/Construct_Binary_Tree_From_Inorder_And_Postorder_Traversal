'''
106. Construct Binary Tree from Inorder and Postorder Traversal

Given two integer arrays inorder and postorder where:
- inorder is the inorder traversal of a binary tree.
- postorder is the postorder traversal of the same tree.

Construct and return the binary tree.

Example 1:
Input: 
inorder   = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Output: [3,9,20,null,null,15,7]

Constructed Tree:
        3
       / \
      9   20
         /  \
        15   7

Explanation:
- Inorder   (Left -> Root -> Right): [9,3,15,20,7]
- Postorder (Left -> Right -> Root): [9,15,7,20,3]
- Using these traversals, we can reconstruct the tree as shown above.

Example 2:
Input: 
inorder   = [-1]
postorder = [-1]
Output: [-1]

Constructed Tree:
       -1

Constraints:
- 1 <= inorder.length <= 3000
- postorder.length == inorder.length
- -3000 <= inorder[i], postorder[i] <= 3000
- inorder and postorder consist of unique values.
- Each value of postorder also appears in inorder.
- inorder is guaranteed to be the inorder traversal of the tree.
- postorder is guaranteed to be the postorder traversal of the tree.
'''



# Definition for a binary tree node.
class TreeNode(object):
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
class Solution(object):
    def buildTree(self, inorder, postorder):
        """
        :type inorder: List[int]
        :type postorder: List[int]
        :rtype: Optional[TreeNode]
        """
        if not inorder:
            return None
        nodeVal = postorder.pop()
        ret = TreeNode(nodeVal)
        index = inorder.index(nodeVal)
        left = inorder[:index]
        right = inorder[index+1:]
        ret.left = self.buildTree(left,postorder[:len(left)])
        ret.right = self.buildTree(right,postorder[len(left):])
        return ret
    
# Slight faster and simpler:
class Solution(object):
    def buildTree(self, inorder, postorder):
        """
        :type inorder: List[int]
        :type postorder: List[int]
        :rtype: Optional[TreeNode]
        """
        if not inorder:
            return None
        nodeVal = postorder.pop()
        ret = TreeNode(nodeVal)
        index = inorder.index(nodeVal)
        ret.right = self.buildTree(inorder[index+1:],postorder)
        ret.left = self.buildTree(inorder[:index],postorder)
        return ret